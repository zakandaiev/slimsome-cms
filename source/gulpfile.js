'use strict';

const browserSync       = require('browser-sync').create();

const del               = require('del');

const   gulp            = require('gulp'),
        autoprefixer    = require('gulp-autoprefixer'),
        cleancss        = require('gulp-clean-css'),
        htmlmin         = require('gulp-htmlmin'),
        imagemin        = require('gulp-imagemin'),
        rigger          = require('gulp-rigger'),
        sass            = require('gulp-sass')(require('sass')),
        sourcemaps      = require('gulp-sourcemaps'),
        terser          = require('gulp-terser');

const path = {
  prod_build: {
    core: '../core/',
    partials: '../partials/',
    html: '../',
    js: '../js/',
    css: '../css/',
    img: '../img/',
    fonts: '../fonts/'
  },
  dev_build: {
    core: '../core/',
    partials: '../partials/',
    html: '../',
    js: '../js/',
    css: '../css/',
    img: '../img/',
    fonts: '../fonts/'
  },
  src: {
    core: 'src/core/**/*.*',
    partials: 'src/partials/*.php',
    html: 'src/*.php',
    js: 'src/js/main.js',
    style: 'src/styles/main.scss',
    img: 'src/img/**/*.*',
    fonts: 'src/fonts/**/*.*'
  },
  watch: {
    core: 'src/core/**/*.*',
    partials: 'src/partials/*.php',
    html: 'src/*.php',
    js: 'src/js/**/*.js',
    style: 'src/styles/**/*.scss',
    img: 'src/img/**/*.*',
    fonts: 'src/fonts/**/*.*'
  },
  clean: {
    dev_folder: '../*',
    prod_folder: '../*',
    except: '../!source'
  }
};

function cleanDev() {
  return del([path.clean.dev_folder, path.clean.except], {force: true, dryRun: true});
}

function cleanProd() {
  return del([path.clean.prod_folder, path.clean.except], {force: true, dryRun: true});
}

function htmlDevBuild() {
  return gulp.src(path.src.html)
  .pipe(rigger())
  .pipe(gulp.dest(path.dev_build.html))
  .pipe(browserSync.stream());
}

function coreDevBuild() {
  return gulp.src(path.src.core)
  .pipe(rigger())
  .pipe(gulp.dest(path.dev_build.core))
  .pipe(browserSync.stream());
}

function partialsDevBuild() {
  return gulp.src(path.src.partials)
  .pipe(rigger())
  .pipe(gulp.dest(path.dev_build.partials))
  .pipe(browserSync.stream());
}

function coreProdBuild() {
  return gulp.src(path.src.core)
  .pipe(rigger())
  .pipe(gulp.dest(path.prod_build.core));
}

function partialsProdBuild() {
  return gulp.src(path.src.partials)
  .pipe(rigger())
  /*.pipe(htmlmin({
    collapseWhitespace: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: true,
    removeComments: true
  }))*/
  .pipe(gulp.dest(path.prod_build.partials));
}

function htmlProdBuild() {
  return gulp.src(path.src.html)
  .pipe(rigger())
  /*.pipe(htmlmin({
    collapseWhitespace: true,
    ignoreCustomFragments: [ /<%[\s\S]*?%>/, /<\?[=|php]?[\s\S]*?\?>/ ],
    minifyCSS: true,
    minifyJS: true,
    removeComments: true
  }))*/
  .pipe(gulp.dest(path.prod_build.html));
}

function cssDevBuild() {
  return gulp.src(path.src.style)
  .pipe(sourcemaps.init())
  .pipe(sass.sync({includePaths: ['node_modules']}).on('error', sass.logError))
  .pipe(autoprefixer(['last 15 versions']))
  .pipe(sourcemaps.write())
  .pipe(gulp.dest(path.dev_build.css))
  .pipe(browserSync.stream());
}

function cssProdBuild() {
  return gulp.src(path.src.style)
  .pipe(sass.sync({includePaths: ['node_modules']}).on('error', sass.logError))
  .pipe(autoprefixer(['last 15 versions']))
  .pipe(cleancss( {level: 1} ))
  .pipe(gulp.dest(path.prod_build.css));
}

function jsDevBuild() {
  return gulp.src(path.src.js)
  .pipe(rigger())
  .pipe(sourcemaps.init())
  .pipe(sourcemaps.write())
  .pipe(gulp.dest(path.dev_build.js))
  .pipe(browserSync.stream());
}

function jsProdBuild() {
  return gulp.src(path.src.js)
  .pipe(rigger())
  .pipe(terser({
    ecma: 2015,
    output: {
      comments: false
    }
  }))
  .pipe(gulp.dest(path.prod_build.js));
}

function imageDevBuild() {
  return gulp.src(path.src.img)
  .pipe(gulp.dest(path.dev_build.img))
  .pipe(browserSync.stream());
}

function imageProdBuild() {
  return gulp.src(path.src.img)
  .pipe(imagemin([
    imagemin.gifsicle({interlaced: true}),
    imagemin.mozjpeg({quality: 80, progressive: true}),
    imagemin.optipng({optimizationLevel: 5}),
    imagemin.svgo({
      plugins: [
      {removeUselessStrokeAndFill: false},
      {removeUselessDefs: false},
      {removeViewBox: false},
      {cleanupIDs: false}
      ]
    })
    ]))
  .pipe(gulp.dest(path.prod_build.img));
}

function fontsBuild() {
  return gulp.src(path.src.fonts)
  .pipe(gulp.dest(path.dev_build.fonts))
  .pipe(gulp.dest(path.prod_build.fonts))
  .pipe(browserSync.stream());
}

function rootDirFilesBuild() {
  return gulp.src('./src/_root-dir-files/**/*.*')
  .pipe(gulp.dest(path.prod_build.html))
  .pipe(browserSync.stream());
}

function watch() {
  browserSync.init({
    proxy: "slimsome.local"
  });

  gulp.watch(path.watch.core, coreDevBuild);
  gulp.watch(path.watch.partials, partialsDevBuild);
  gulp.watch(path.watch.html, htmlDevBuild);
  gulp.watch(path.watch.style, cssDevBuild);
  gulp.watch(path.watch.js, jsDevBuild);
  gulp.watch(path.watch.img, imageDevBuild);
  gulp.watch(path.watch.fonts, fontsBuild);
  gulp.watch("./src/_root-dir-files/**/*.*", rootDirFilesBuild);
}

// *** EXPORT TASKS *** \\
// del
exports.cleanDev = cleanDev;
exports.cleanProd = cleanProd;

// core
exports.coreDevBuild = coreDevBuild;
exports.coreProdBuild = coreProdBuild;

// partials
exports.partialsDevBuild = partialsDevBuild;
exports.partialsProdBuild = partialsProdBuild;

// html
exports.htmlDevBuild = htmlDevBuild;
exports.htmlProdBuild = htmlProdBuild;

// css
exports.cssDevBuild = cssDevBuild;
exports.cssProdBuild = cssProdBuild;

// js
exports.jsDevBuild = jsDevBuild;
exports.jsProdBuild = jsProdBuild;

// image
exports.imageDevBuild = imageDevBuild;
exports.imageProdBuild = imageProdBuild;

// fonts
exports.fontsBuild = fontsBuild;

// rootDirFiles
exports.rootDirFilesBuild = rootDirFilesBuild;

// browserSync watch
exports.watch = watch;

// *** DEVELOPEMENT BUILD *** \\
async function startDevBuild() {
  return gulp.series (
    cleanDev,
    gulp.parallel (
      coreDevBuild,
      partialsDevBuild,
      htmlDevBuild,
      cssDevBuild,
      jsDevBuild,
      imageDevBuild,
      fontsBuild,
      rootDirFilesBuild
    ),
  watch
  )();
}
exports.start = startDevBuild;
exports.dev = startDevBuild;

// *** PRODUCTION BUILD *** \\
async function makeProdBuild() {
  return gulp.series (
    cleanProd,
    gulp.parallel (
      coreProdBuild,
      partialsProdBuild,
      htmlProdBuild,
      cssProdBuild,
      jsProdBuild,
      imageProdBuild,
      fontsBuild,
      rootDirFilesBuild
    )
  )();
}
exports.build = makeProdBuild;

// *** DEFAULT GULP TASK *** \\
exports.default = startDevBuild;